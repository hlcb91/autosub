#!/usr/bin/env python
import argparse
import audioop
import json
import math
import os
import subprocess
import sys
import tempfile
import wave


def percentile(arr, percent):
    arr = sorted(arr)
    k = (len(arr) - 1) * percent
    f = math.floor(k)
    c = math.ceil(k)
    if f == c: return arr[int(k)]
    d0 = arr[int(f)] * (c - k)
    d1 = arr[int(c)] * (k - f)
    return d0 + d1


def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None


def extract_audio(filename, channels=1, rate=16000, keep_wav=False):
    if keep_wav:
        if ((filename[-4:] == '.mkv' or filename[-4:] == '.mp4' or filename[-4:] == '.avi' or filename[-4:] == '.flv') and os.path.isfile(filename[0:-4] + '.wav') ):
            return filename[0:-4] + '.wav', rate
        if not os.path.isfile(filename):
            print("The given file does not exist: {0}".format(filename))
            raise Exception("Invalid filepath: {0}".format(filename))
        if not which("ffmpeg"):
            print("ffmpeg: Executable not found on machine.")
            raise Exception("Dependency not found: ffmpeg")
        temp = open(filename[0:-4] + '.wav', 'w+')
        command = ["ffmpeg", "-y", "-i", filename, "-ac", str(channels), "-ar", str(rate), "-loglevel", "error", temp.name]
        subprocess.check_output(command, stdin=open(os.devnull))
        return temp.name, rate
    temp = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)
    if not os.path.isfile(filename):
        print("The given file does not exist: {0}".format(filename))
        raise Exception("Invalid filepath: {0}".format(filename))
    if not which("ffmpeg"):
        print("ffmpeg: Executable not found on machine.")
        raise Exception("Dependency not found: ffmpeg")
    command = ["ffmpeg", "-y", "-i", filename, "-ac", str(channels), "-ar", str(rate), "-loglevel", "error", temp.name]
    subprocess.check_output(command, stdin=open(os.devnull))
    return temp.name, rate


def find_speech_regions(filename, frame_width=4096, min_region_size=0.5, max_region_size=6, dthreshold=0.2):
    reader = wave.open(filename)
    sample_width = reader.getsampwidth()
    rate = reader.getframerate()
    n_channels = reader.getnchannels()

    total_duration = reader.getnframes() / rate
    chunk_duration = float(frame_width) / rate

    n_chunks = int(total_duration / chunk_duration)
    energies = []

    for i in range(n_chunks):
        chunk = reader.readframes(frame_width)
        energies.append(audioop.rms(chunk, sample_width * n_channels))

    threshold = percentile(energies, dthreshold)

    elapsed_time = 0

    regions = []
    region_start = None
    region_counter = 0

    for energy in energies:
        is_silence = energy <= threshold
        max_exceeded = region_start and elapsed_time - region_start >= max_region_size

        if (max_exceeded or is_silence) and region_start:
            if elapsed_time - region_start >= min_region_size:
                regions.append((region_counter, region_start, elapsed_time))
                region_start = None
                region_counter += 1

        elif (not region_start) and (not is_silence):
            region_start = elapsed_time
        elapsed_time += chunk_duration
    return regions


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('source_path', help="Path to the video or audio file to regions", nargs='?')
    parser.add_argument('-o', '--output',
                        help="Output path for regions (by default, regions are saved in \
                        the same directory and name as the source path)")
    parser.add_argument('-AC', '--channels', help="Number of audio channels in the WAV file", type=int, default=1)
    parser.add_argument('-AR', '--rate', help="Number of audio sampling rate (in Hz) in the WAV file", type=int, default=16000)
    parser.add_argument('-FW', '--frame-width', help="Frame width", type=int, default=4096)
    parser.add_argument('-MI', '--min-region-size', help="Minimum region size", default=0.5,type=float)
    parser.add_argument('-MA', '--max-region-size', help="Maximum region size", type=int, default=6)
    parser.add_argument('-T', '--threshold', help="Threshold,for level noise", default=0.2,type=float)
    parser.add_argument('--keep-wav', help="Keeps the WAV file in the same folder as the video", action='store_true')
    parser.set_defaults(keep_wav=False)

    args = parser.parse_args()

    if not args.source_path:
        print("Error: You need to specify a source path.")
        return 1

    audio_filename, audio_rate = extract_audio(args.source_path, channels=args.channels, rate=args.rate, keep_wav=args.keep_wav)

    regions = find_speech_regions(filename=audio_filename, frame_width=args.frame_width, min_region_size=args.min_region_size, max_region_size=args.max_region_size, dthreshold=args.threshold)

    dest = args.output

    if not dest:
        base, ext = os.path.splitext(args.source_path)
        dest = "{base}.{format}".format(base=base, format="regions.json")

    with open(dest, 'wb') as f:
        f.write(json.dumps(regions))

    print("Regions file created at {}".format(dest))

    if not args.keep_wav:
        if os.path.isfile(audio_filename):
            os.remove(audio_filename)

    return 0


if __name__ == '__main__':
    sys.exit(main())
